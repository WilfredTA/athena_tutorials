load "nat-minus"
load "nat-less"
module Factorial {

   define [< - * one <=] := [N.< N.- N.* N.one N.<=]

    declare factorial: [N] -> N [[int->nat]]
    (transform-output eval [nat->int])
    
    assert f_zero := (forall x . x = zero ==> factorial x = one)

    assert f_x := (forall x . one < x ==> (factorial x) = (x * (factorial (x - one))))

    assert f_one := (forall x . one = x ==> (factorial x) = one)

    assert least_f := (forall x . one <= (factorial x))
    assert* all_x := (x = zero | x = one | one < x)
    (eval (factorial 4))
    (eval (factorial 5))

    assert x_times_y := (forall x y . one < x & zero < y ==> one < (x * y))
    assert x_lt_y_to_x_lte_sub1 := (forall x y . x < S y ==> x <= y)
    define nothing-less-than-zero := (forall x . ~ x < zero)
    
    define f_x_less_than := (forall x . factorial (x - one) <= factorial x )
    define [lte-def] := N.Less=.<=-def

    by-induction f_x_less_than {
        zero => conclude base_case := (factorial (zero - one) <= factorial zero)
                        let {
                            zero-lt-one := (!chain-> [true ==> (zero < (S zero)) [N.Less.zero<S] ==> (zero < one) [(one = (S zero))]]);
                            zero<one_or_zero=one := (!left-either (zero < one) (zero = one));
                            f_zero-1_eq_f_zero := (!chain [
                                (factorial (zero - one))
                                    = (factorial zero)  [N.Minus.zero-left] 
                            ]);
                            f_zero-1_eq_or_lt_f_zero := (!right-either (factorial (zero - one) < (factorial zero))  f_zero-1_eq_f_zero)
                        }
                        (!mp (!right-iff (!uspec* lte-def [(factorial zero) (factorial (zero - one))])) f_zero-1_eq_or_lt_f_zero)

        | (m as (S n)) => conclude inductive_step := ((factorial (m - one)) <= (factorial m))
                    let {
                        ih := ((factorial (n - one)) <= (factorial n));
                        _ := (!claim ih);
                        n-lt-m := (!chain-> [
                            true 
                            ==> (n < (S n)) [N.Less.<S]
                            ==> (n < m)     [((S n) = m)]
                        ]);
                        m-not-zero := (!chain-> [
                            true ==> (m =/= zero) [N.S-not-zero]
                        ]);
                        zero-lt-m := (!chain-> [
                            true ==> (zero < m) [N.Less.zero<S]
                        ]);
                        one-lte-m := conclude (one <= m)
                                        (!chain-> [
                                           (zero < m)
                                            ==> ((S zero) <= m)             [N.Less=.discrete]
                                            ==> (one <= m)
                                        ]);
                        one_lt_m_or_eq_m := (!mp (!left-iff (!uspec* lte-def [m one])) one-lte-m)
                    }        
                    (!cases one_lt_m_or_eq_m
                        assume (one < m)
                            let {   fm_eq_mxfm-1 := (!chain-> [
                                                        (factorial m) = (m * (factorial (m - one))) [f_x] 
                                    ]);
                                    one-lte-n := conclude (one <= n)
                                                   (!mp (!uspec* x_lt_y_to_x_lte_sub1 [one n]) (one < m));
                                    one-lte-n-disj := (!mp (!left-iff (!uspec* lte-def [n one])) one-lte-n)
                            }
                            (!cases one-lte-n-disj 
                                assume (one < n)
                                    let {
                                        Sz-lt-n := (!chain-> [
                                            (one < n) ==> ((S zero) < n) [(one = (S zero))]
                                        ]);
                                        zero-lt-n := conclude (zero < n)
                                                        (!mp (!uspec* N.Less.S1 [zero n]) ((S zero) < n))
                                    }
                                    (!force inductive_step)
                                    # (!mp (!uspec* x_times_y [m n]) (!both (one < m) (zero < n)))
                                assume (one = n)
                                    (!force inductive_step)
                            )
                        assume (one = m)
                            (!force inductive_step)
                    )
                   
    }
}