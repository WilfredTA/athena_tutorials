load "nat-less"
(transform-output eval [nat->int])
module Factorial {
    declare factorial: [N] -> N [fact [int->nat]]
    
    define [< * one zero <=] := [N.< N.* (S N.zero) N.zero N.<= ]
    define [n m k] := [?n:N ?m:N ?k:N]
    define two := (S one)


    assert* fact-def := [
        (fact zero = one)
        (fact one = one)
        (fact S n = S n * fact n)
    ]
    

    (eval fact 5) # 120

    define [lte-def] := N.Less=.<=-def
    define theorem := (forall n . fact n N.<= fact S n)

    define (make-induction-goal x) := (fact x <= fact S x)
    by-induction theorem {
        zero => (!prove (make-induction-goal zero) (ab))
        | (one as (S zero)) => (!prove (make-induction-goal one) (ab))
        | (n as (S m)) => (!prove (make-induction-goal n) (ab))
    }
}
